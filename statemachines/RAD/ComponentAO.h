//****************************************************************************
// Model: RAD.qm
// File:  RAD/ComponentAO.h
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This code is covered by the following commercial QP license:
// License #   : QPC-EVAL-170804A
// Issued to   : Chinmay Nagarkar
// Framework(s): qpc qpcpp qpn
// Support ends: 2017-12-31
// Product(s)  :
// This license is available only for evaluation purposes and
// the generated code is still licensed under the terms of GPL.
// Please submit request for extension of the evaluaion period at:
// https://state-machine.com/licensing/#RequestForm
//****************************************************************************
//${RAD::RAD::ComponentAO.h} .................................................
#ifndef _RAD_COMPONENT_H
#define _RAD_COMPONENT_H

#include "RAD.h"
#include "qpcpp.h"


namespace RAD {
RequestData toRequest(QP::QEvt const *e);
ResponseData toResponse(QP::QEvt const *e);
ResourceRequest toResourceRequest(QP::QEvt const *e);
ResourceResponse toResourceResponse(QP::QEvt const *e);
ProvisionComponentRequest toProvisionComponentRequest(QP::QEvt const *e);
ProvisionComponentResponse toProvisionComponentResponse(QP::QEvt const *e);
InterruptData toInterrupt(QP::QEvt const *e);
DriverQueryRequest toDriverQueryRequest(QP::QEvt const *e);

#define PUBLISH_FAILURE_RESPONSE(e)                    (void)0
#define BROADCAST_COMPONENT_STARTED(sig)    (void)0
#define HAS_INSUFFICIENT_ACTIVITY()                        false
#define MAX_RETRIES_REACHED()                                true
#define POST_LIFO(sig)                                                    (void)0;

} // namespae

namespace RAD {


#if ((QP_VERSION < 580) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpcpp version 5.8.0 or higher required
#endif

//${RAD::ComponentAO} ........................................................
class ComponentAO : public QP::QActive {
protected:
    const char * m_name;

public:
    bool m_errorOccurred;
    ComponentType m_type;
    ComponentAO * m_parent;

public:

    /**
     @param[in] name Name of this Active AO
     @param[in] type One of Service or Device
     @param[in] parent The Device or null.
     @param[in]
    **/
    ComponentAO(ComponentAO * parent, const char * name = "Missing Component Name")
        : QActive((QStateHandler)&initial)
        , m_parent(parent)
        , m_name(name)
        , m_errorOccurred(false)
    {
        if (parent == NULL) {
          m_type = DEVICE;
        } else {
          m_type = SERVICE;
        }
        //QS::obj_dict(this, "ComponentAO");
    }
    virtual void ArmActivityTimeout();
    virtual void ArmInitializationTimeout();
    virtual void DisarmActivityTimeout();
    virtual void DisarmInitializationTimeout();
    virtual void OnInitializationTimeout();
    virtual void OnActivityTimeout();
    virtual void RequestResources();
    virtual bool AllResourcesGranted() {
        return true;
    }
    virtual void OnServiceRequest(RequestData  request);
    virtual void OnServiceResponse(ResponseData  response);
    virtual void OnInterrupt(InterruptData interrupt);
    virtual void OnCreate();
    virtual void OnStart();
    virtual void OnRestart();
    virtual void OnPause();
    virtual void OnStopped();
    virtual void OnError();
    virtual bool ErrorOccurred();
    virtual bool HasSufficientActivityOccurred();
    virtual void ConfirmComponentStart() = 0;
    virtual void OnResourceGrant(ResourceResponse & resp);
    virtual void OnResume();
    virtual void ClearError();
    virtual void SetErrorOccurred();
    virtual void ProvisionComponent(ProvisionComponentRequest & request);
    virtual void ReserveResource(ResourceRequest & request);
    virtual DriverQueryResponse GetDriverQueryResponse(DriverQueryRequest & req);
    virtual ID getOfficialId();
    virtual void Start(uint8_t prio);
    virtual void RequestComponentId() = 0;
    virtual void OnProvisionComponentResponse(ProvisionComponentResponse & resp);
    virtual void OnInitial() = 0;

protected:
    static QP::QState initial(ComponentAO * const me, QP::QEvt const * const e);
    static QP::QState Zombie(ComponentAO * const me, QP::QEvt const * const e);
    static QP::QState Error(ComponentAO * const me, QP::QEvt const * const e);
    static QP::QState Stopped(ComponentAO * const me, QP::QEvt const * const e);
    static QP::QState Paused(ComponentAO * const me, QP::QEvt const * const e);
    static QP::QState ServiceAcceptingRequests(ComponentAO * const me, QP::QEvt const * const e);
    static QP::QState WaitingForInitialization(ComponentAO * const me, QP::QEvt const * const e);
    static QP::QState RequestingCompId(ComponentAO * const me, QP::QEvt const * const e);
    static QP::QState RequestingResources(ComponentAO * const me, QP::QEvt const * const e);
    static QP::QState DeviceAcceptingRequests(ComponentAO * const me, QP::QEvt const * const e);
};

} // namespace RAD

//$declare(RAD::DeviceAO)

#endif
