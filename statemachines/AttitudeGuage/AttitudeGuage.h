//****************************************************************************
// Model: NineAxisMeasurement.qm
// File:  AttitudeGuage/AttitudeGuage.h
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${AttitudeGuage::AttitudeGuage::AttitudeGuage.h} ...........................
#ifndef _AO_ATTITUDE_GUAGE_H
#define _AO_ATTITUDE_GUAGE_H

// STM32 Supporting Libs
#include "stm32f4xx_hal.h"
#include "stm32f4xx_nucleo.h"
#include <stdbool.h>

// QP Helpers
#include "qpcpp.h"
#include "bsp.h"
#include "active_events.h"
#include "active_log.h"

#include "LSM6DS0_ACC_GYRO_driver.h"
#include "LSM6DS0_ACC_GYRO_driver_HL.h"
#include "component.h"
#include "x_nucleo_iks01a1_accelero.h"
#include "x_nucleo_iks01a1_gyro.h"

#include "Attitude.h"
#include "AttitudeUtils.h"

//// CONSUMES EVENTS /////////////////////////
//    ATTITUDE_GUAGE_START_REQ_SIG
//    ATTITUDE_GUAGE_STOP_REQ_SIG
//    ATTITUDE_DATA_AVAILABLE_SIG
//// PRODUCES EVENTS /////////////////////////
//    ATTITUDE_GUAGE_START_CFM_SIG
//    ATTITUDE_GUAGE_COMPONENT_FAILED_SIG
//    ATTITUDE_GUAGE_STOP_CFM_SIG
//    ATTITUDE_CHANGED_SIG
//////////////////////////////////////////////


namespace Attitude {


#if ((QP_VERSION < 580) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpcpp version 5.8.0 or higher required
#endif

//${AttitudeGuage::AttitudeGuage} ............................................
class AttitudeGuage : public StdEvents::AO {
private:
    void * m_acc_handle;
    float m_gyroRate;
    uint32_t m_measurements;
    enum  { CHECK_UP_INTERVAL = 1000, MAX_RETRIES = 5 };
    uint32_t m_previousMeasurementCount;
    uint8_t retries;

public:
    AttitudeGuage();
    status_t Init();
    void UpdateGyroRate();
    bool GotNewMeasurements();
    void ProcessAttitude();

protected:
    static QP::QState initial(AttitudeGuage * const me, QP::QEvt const * const e);
    static QP::QState Root(AttitudeGuage * const me, QP::QEvt const * const e);
    static QP::QState Stopped(AttitudeGuage * const me, QP::QEvt const * const e);
    static QP::QState Started(AttitudeGuage * const me, QP::QEvt const * const e);
    static QP::QState Failed(AttitudeGuage * const me, QP::QEvt const * const e);
    static QP::QState CollectingData(AttitudeGuage * const me, QP::QEvt const * const e);
};
//${AttitudeGuage::AttitudeDataEvt} ..........................................
class AttitudeDataEvt : public StdEvents::Evt {
public:
    Acceleration m_acc;
    AngularRate m_angularRate;

public:
    AttitudeDataEvt(Acceleration acc, AngularRate angularRate);
};

} // namespace Attitude

#endif // _AO_ATTITUDE_GUAGE_H
